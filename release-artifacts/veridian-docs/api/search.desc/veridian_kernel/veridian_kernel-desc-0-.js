searchState.loadedDescShard("veridian_kernel", 0, "VeridianOS Kernel Library\nTrait that all testable functions must implement\nBenchmarking framework for VeridianOS kernel\nExit QEMU with a specific exit code\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAssertion macros for kernel tests\nHelper macro for creating test modules\nPanic handler for test mode\nCustom test runner for kernel tests\nTrait for benchmarkable operations\nBenchmark harness for running multiple benchmarks\nResult of a benchmark run\nRun a benchmark function multiple times\nConvert cycles to nanoseconds (approximate) This assumes a â€¦\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this benchmark meets a target latency\nGet the name of this benchmark\nCreate a new benchmark result\nArchitecture-specific timestamp counter\nRun the benchmark and return the result\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")