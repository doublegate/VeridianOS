#!/usr/bin/env bash
# Commit message validation hook for VeridianOS
# Enforces conventional commit format

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Get the commit message
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

echo "üîç Validating commit message..."

# Skip validation for merge commits
if grep -q "^Merge" "$COMMIT_MSG_FILE"; then
    echo -e "${GREEN}‚úì Merge commit detected, skipping validation${NC}"
    exit 0
fi

# Define valid commit types
VALID_TYPES=(
    "feat"     # New feature
    "fix"      # Bug fix
    "docs"     # Documentation changes
    "style"    # Code style changes (formatting, etc)
    "refactor" # Code refactoring
    "perf"     # Performance improvements
    "test"     # Test additions or corrections
    "build"    # Build system changes
    "ci"       # CI/CD changes
    "chore"    # Maintenance tasks
    "revert"   # Revert a previous commit
    "wip"      # Work in progress (should not be pushed)
)

# Valid scopes for VeridianOS
VALID_SCOPES=(
    "kernel"
    "mm"       # Memory management
    "sched"    # Scheduler
    "ipc"      # Inter-process communication
    "cap"      # Capability system
    "arch"     # Architecture-specific
    "x86_64"
    "aarch64"
    "riscv"
    "driver"
    "service"
    "test"
    "bench"
    "docs"
    "ci"
    "build"
)

# Conventional commit regex pattern
# Format: type(scope): description
# or:     type: description
PATTERN='^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert|wip)(\([a-z0-9_-]+\))?: .{1,100}$'

# Check first line format
FIRST_LINE=$(echo "$COMMIT_MSG" | head -n1)

if ! echo "$FIRST_LINE" | grep -qE "$PATTERN"; then
    echo -e "${RED}‚ùå Invalid commit message format${NC}"
    echo ""
    echo "Expected format:"
    echo -e "${BLUE}  type(scope): description${NC}"
    echo -e "${BLUE}  type: description${NC}"
    echo ""
    echo "Valid types:"
    for type in "${VALID_TYPES[@]}"; do
        case "$type" in
            feat)     echo -e "  ${GREEN}feat${NC}     - New feature" ;;
            fix)      echo -e "  ${GREEN}fix${NC}      - Bug fix" ;;
            docs)     echo -e "  ${GREEN}docs${NC}     - Documentation changes" ;;
            style)    echo -e "  ${GREEN}style${NC}    - Code style changes" ;;
            refactor) echo -e "  ${GREEN}refactor${NC} - Code refactoring" ;;
            perf)     echo -e "  ${GREEN}perf${NC}     - Performance improvements" ;;
            test)     echo -e "  ${GREEN}test${NC}     - Test changes" ;;
            build)    echo -e "  ${GREEN}build${NC}    - Build system changes" ;;
            ci)       echo -e "  ${GREEN}ci${NC}       - CI/CD changes" ;;
            chore)    echo -e "  ${GREEN}chore${NC}    - Maintenance tasks" ;;
            revert)   echo -e "  ${GREEN}revert${NC}   - Revert previous commit" ;;
            wip)      echo -e "  ${YELLOW}wip${NC}      - Work in progress" ;;
        esac
    done
    echo ""
    echo "Common scopes: kernel, mm, sched, ipc, cap, arch, driver, test, ci"
    echo ""
    echo "Examples:"
    echo -e "  ${GREEN}feat(kernel): add initial boot sequence for x86_64${NC}"
    echo -e "  ${GREEN}fix(mm): resolve page fault in frame allocator${NC}"
    echo -e "  ${GREEN}docs: update README with build instructions${NC}"
    echo -e "  ${GREEN}test(ipc): add benchmarks for message passing${NC}"
    echo ""
    echo "Your message:"
    echo -e "${RED}  $FIRST_LINE${NC}"
    exit 1
fi

# Extract type and scope
if [[ "$FIRST_LINE" =~ ^([a-z]+)(\(([a-z0-9_-]+)\))?: ]]; then
    TYPE="${BASH_REMATCH[1]}"
    SCOPE="${BASH_REMATCH[3]}"
else
    echo -e "${RED}‚ùå Could not parse commit type${NC}"
    exit 1
fi

# Validate scope if present
if [ -n "$SCOPE" ]; then
    VALID_SCOPE=0
    for valid in "${VALID_SCOPES[@]}"; do
        if [ "$SCOPE" = "$valid" ]; then
            VALID_SCOPE=1
            break
        fi
    done
    
    # Also allow arch/subarch format
    if [[ "$SCOPE" =~ ^arch/(x86_64|aarch64|riscv)$ ]]; then
        VALID_SCOPE=1
    fi
    
    if [ $VALID_SCOPE -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Uncommon scope: $SCOPE${NC}"
        echo "Common scopes: ${VALID_SCOPES[*]}"
        # This is a warning, not an error
    fi
fi

# Check message length
FIRST_LINE_LENGTH=${#FIRST_LINE}
if [ $FIRST_LINE_LENGTH -gt 100 ]; then
    echo -e "${RED}‚ùå First line too long ($FIRST_LINE_LENGTH > 100 characters)${NC}"
    echo "Keep the first line under 100 characters"
    exit 1
fi

if [ $FIRST_LINE_LENGTH -lt 10 ]; then
    echo -e "${RED}‚ùå First line too short ($FIRST_LINE_LENGTH < 10 characters)${NC}"
    echo "Provide a meaningful description"
    exit 1
fi

# Check for WIP commits
if [ "$TYPE" = "wip" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  WIP commit detected${NC}"
    echo "Remember to squash WIP commits before pushing"
fi

# Check for capitalization after colon
if [[ "$FIRST_LINE" =~ : ]] && [[ "$FIRST_LINE" =~ :[[:space:]]*[A-Z] ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Description should start with lowercase${NC}"
    echo "Use: 'type: add new feature' not 'type: Add new feature'"
fi

# Check for period at end
if [[ "$FIRST_LINE" =~ \\.$ ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  First line should not end with a period${NC}"
fi

# Check commit body
BODY=$(echo "$COMMIT_MSG" | tail -n +3)
if [ -n "$BODY" ]; then
    # Check for proper blank line between subject and body
    SECOND_LINE=$(echo "$COMMIT_MSG" | sed -n '2p')
    if [ -n "$SECOND_LINE" ]; then
        echo -e "${RED}‚ùå Missing blank line between subject and body${NC}"
        echo "Add a blank line after the first line"
        exit 1
    fi
    
    # Check body line length (warn only)
    LONG_LINES=$(echo "$BODY" | grep -E '^.{73,}' | wc -l)
    if [ "$LONG_LINES" -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  $LONG_LINES lines in body exceed 72 characters${NC}"
        echo "Consider wrapping commit body at 72 characters"
    fi
fi

# Check for issue references
if echo "$COMMIT_MSG" | grep -qiE "(close[sd]?|fix(es|ed)?|resolve[sd]?)[[:space:]]+#[0-9]+"; then
    echo -e "${GREEN}‚úì Issue reference detected${NC}"
fi

# Special checks for different types
case "$TYPE" in
    feat)
        if ! echo "$BODY" | grep -qE "(test|Test)" && [ -n "$BODY" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Feature commit without test mention${NC}"
            echo "Consider mentioning how this feature is tested"
        fi
        ;;
    fix)
        if ! echo "$COMMIT_MSG" | grep -qiE "(issue|bug|problem|error|fix)" ; then
            echo -e "${YELLOW}‚ö†Ô∏è  Fix commit without issue description${NC}"
            echo "Consider describing what was broken"
        fi
        ;;
    revert)
        if ! echo "$FIRST_LINE" | grep -qE "This reverts commit [0-9a-f]{7,}"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Revert without commit SHA${NC}"
            echo "Include the commit SHA being reverted"
        fi
        ;;
esac

echo -e "${GREEN}‚úÖ Commit message valid${NC}"
echo -e "  Type: ${BLUE}$TYPE${NC}"
if [ -n "$SCOPE" ]; then
    echo -e "  Scope: ${BLUE}$SCOPE${NC}"
fi

exit 0