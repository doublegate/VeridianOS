#!/usr/bin/env bash
# Pre-push hook for VeridianOS
# Runs tests before pushing to remote

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "üöÄ Running pre-push checks..."

# Get remote and branch info
REMOTE="$1"
URL="$2"

# Check if pushing to main/develop (protected branches)
PROTECTED_BRANCHES=("main" "develop")
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

IS_PROTECTED=0
for branch in "${PROTECTED_BRANCHES[@]}"; do
    if [ "$CURRENT_BRANCH" = "$branch" ]; then
        IS_PROTECTED=1
        break
    fi
done

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# 1. Check for WIP commits
echo "üîç Checking for WIP commits..."
WIP_COMMITS=$(git log --oneline @{u}.. | grep -i "^[a-f0-9]* wip" || true)
if [ -n "$WIP_COMMITS" ]; then
    echo -e "${RED}‚ùå WIP commits detected:${NC}"
    echo "$WIP_COMMITS"
    echo ""
    echo "Please squash or amend WIP commits before pushing"
    echo "Use 'git push --no-verify' to force push (not recommended)"
    exit 1
else
    echo -e "${GREEN}‚úì No WIP commits${NC}"
fi

# 2. Run formatting check
echo "üìù Checking code formatting..."
if command_exists rustfmt; then
    if ! cargo fmt -- --check >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Code formatting issues detected${NC}"
        echo "Run 'cargo fmt' to fix formatting"
        exit 1
    else
        echo -e "${GREEN}‚úì Code formatting OK${NC}"
    fi
fi

# 3. Run clippy (for protected branches)
if [ $IS_PROTECTED -eq 1 ]; then
    echo "üìé Running clippy checks (protected branch)..."
    if command_exists cargo-clippy; then
        if ! cargo clippy --all-targets --all-features -- -D warnings 2>/dev/null; then
            echo -e "${RED}‚ùå Clippy warnings found${NC}"
            echo "Fix clippy warnings before pushing to $CURRENT_BRANCH"
            exit 1
        else
            echo -e "${GREEN}‚úì Clippy checks passed${NC}"
        fi
    fi
fi

# 4. Check that Cargo.lock is up to date
echo "üîí Checking Cargo.lock..."
if ! cargo check --locked >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Cargo.lock is out of date${NC}"
    echo "Run 'cargo check' and commit the updated Cargo.lock"
    exit 1
else
    echo -e "${GREEN}‚úì Cargo.lock is up to date${NC}"
fi

# 5. Run tests (configurable)
if [ "${RUN_TESTS_PREPUSH:-1}" = "1" ]; then
    echo "üß™ Running tests..."
    
    # For x86_64 we can run tests
    if command_exists qemu-system-x86_64; then
        echo "  Running x86_64 tests..."
        if cargo test --target targets/x86_64-veridian.json -p veridian-kernel \
           -Zbuild-std=core,compiler_builtins,alloc \
           -Zbuild-std-features=compiler-builtins-mem >/dev/null 2>&1; then
            echo -e "${GREEN}  ‚úì x86_64 tests passed${NC}"
        else
            echo -e "${RED}  ‚ùå x86_64 tests failed${NC}"
            echo "Fix failing tests or set RUN_TESTS_PREPUSH=0"
            exit 1
        fi
    else
        echo -e "${YELLOW}  ‚ö†Ô∏è  QEMU not found, skipping integration tests${NC}"
    fi
    
    # Run doc tests
    echo "  Running doc tests..."
    if cargo test --doc >/dev/null 2>&1; then
        echo -e "${GREEN}  ‚úì Doc tests passed${NC}"
    else
        echo -e "${YELLOW}  ‚ö†Ô∏è  Some doc tests failed${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Tests skipped (RUN_TESTS_PREPUSH=0)${NC}"
fi

# 6. Check documentation builds
echo "üìö Checking documentation..."
if ! cargo doc --no-deps --quiet 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Documentation build warnings${NC}"
fi

# 7. Security check for sensitive files
echo "üîê Checking for sensitive files..."
SENSITIVE_PATTERNS=(
    "*.key"
    "*.pem"
    "*.p12"
    ".env*"
    "*_rsa"
    "*_dsa"
    "*_ed25519"
    "*_ecdsa"
    "*.pfx"
    "secrets.json"
    "credentials.json"
)

FOUND_SENSITIVE=0
for pattern in "${SENSITIVE_PATTERNS[@]}"; do
    if git diff --name-only @{u}.. | grep -q "$pattern"; then
        echo -e "${RED}‚ùå Potentially sensitive file detected: $pattern${NC}"
        FOUND_SENSITIVE=1
    fi
done

if [ $FOUND_SENSITIVE -eq 1 ]; then
    echo "Ensure no secrets are being committed"
    echo "Use 'git push --no-verify' to force push if intentional"
    exit 1
else
    echo -e "${GREEN}‚úì No sensitive files detected${NC}"
fi

# 8. Check branch naming
if [[ ! "$CURRENT_BRANCH" =~ ^(main|develop|feature/.*|bugfix/.*|hotfix/.*|release/.*|chore/.*)$ ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Non-standard branch name: $CURRENT_BRANCH${NC}"
    echo "Consider using: feature/, bugfix/, hotfix/, release/, or chore/"
fi

# 9. Size check - warn about large pushes
COMMIT_COUNT=$(git rev-list --count @{u}..)
if [ "$COMMIT_COUNT" -gt 20 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Large push detected ($COMMIT_COUNT commits)${NC}"
    echo "Consider breaking into smaller PRs"
fi

# Summary
echo ""
echo -e "${GREEN}‚úÖ Pre-push checks completed${NC}"
echo -e "  Remote: ${BLUE}$REMOTE${NC}"
echo -e "  Branch: ${BLUE}$CURRENT_BRANCH${NC}"
echo -e "  Commits: ${BLUE}$COMMIT_COUNT${NC}"
echo ""

exit 0